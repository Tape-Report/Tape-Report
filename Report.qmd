---
title: "Differentiating Cellulose Tape for Trace Evidence"
author:
  - Teaching Fellow - Minh Thu Bui
  - Supervisor - Professor Masanao Yajima
  - Yingmai Chen, Maysen Pagan, Chang Shi, Yan Wang
format: pdf
editor: visual
number-sections: true
---

# Project Background

Annamae Joyce is a Graduate student in the Chobanian and Avedisian School of Medicine at Boston University. Annamae is an intern at the Boston Police Department crime lab and is interested in differentiating cellulose tape, or scotch tape, to determine if it can be used as trace evidence.

The sample size of this experiment is 22 tapes. Each roll of tape was divided into 3 sections based on each roll's length. Site 1 refers to the beginning section of each roll, site 2 refers to the middle section, and site 3 refers to the last or end section.

The width and thickness of each tape were measured using a caliber tool. The width measurements of the tapes were measured on one day, with three measurements taken at each site, resulting in a total of nine measurements per roll. The thickness was measured over multiple days, with an emphasis on blind measurements, ensuring the accuracy and integrity of the data. Similar to the width measurements, the thickness measurements also consisted of three measurements at each site, yielding a total of nine measurements per roll.

# Objectives

The client seeks to determine whether various types of tape can be reliably distinguished from one another based on certain measured features. The primary aim is to investigate the potential use of tape as trace evidence in forensic science. Cellulose tape is fequently found on victims or used by suspects in the creation of explosive devices. The question arises of whether tape can be considered as trace evidence to possibly link individuals to cases.

# Data Cleaning and Organization

In the data preparation process for four distinct datasets---width.csv, thickness.csv, stereo_phys.csv, and plm.csv---a meticulous approach was employed to ensure cleanliness and organization. The width.csv dataset was loaded and immediately cleaned by removing average and standard deviation columns, excising the term "tape" from the X column, converting the first ten columns to numeric values, and discarding any rows filled with NAs or labeled "tape 7". After renaming the columns to conform to a specific format, the data was reshaped into a longer format for easier manipulation.

Similarly, the thickness.csv dataset underwent an equivalent process of loading, pruning, cleansing, and transforming, with the addition of splitting the data into thickness_ba and thickness_backing subsets. These subsets were then individually reshaped and eventually merged with the width dataset to create a single, more comprehensive dataset named data.

For the stereo_phys.csv file, after the initial steps of loading and cleaning were replicated, the columns were renamed to more descriptive terms, and the physical data it contained was incorporated into the data dataset to further enhance its depth.

The plm.csv file was also subjected to a similar sequence of actions. Notably, the BOPP column was transformed into binary values to better reflect the nature of its data, and like the others, its refined output was merged into the data dataset.

The final step in the data preparation phase was the encoding of categorical variables across several columns into numeric form, a crucial step for subsequent analytic tasks that require numerical input. This thorough conversion from categorical to numeric across the datasets standardizes the data, preparing it for analysis.

# Models

The method used to analyze the dissimilarities between each of the 22 tapes involves visualizing a heatmap with hierarchical clusterings of the tapes. These clusterings are determined by the "distances" between each tape.

## Tape Distances {#sec-distances}

Defining a distance between tapes provides a measure of dissimilarity between each tape. Variables for each of the tapes included three numerical variables (width, thickness of backing, and thickness of backing and adhesive) as well as 12 categorical variables. Not all of the variables are numeric and as a result, the Gower's distance is calculated between two tapes which accounts for both numerical and categorical variables. Before taking the Gower's distance between each tape, the categorical variables were first converted to numeric values by encoding each level of the variable 1 to the total number of levels of that variable. For example, the categorical variable `Texture` has three levels: "Rough", "Smooth", "Slightly Rough". "Rough" was coded as 1, "Smooth" was coded as 2, and "Slightly Rough" was coded as 3. Each number was then divided by the total number of levels to obtain normalized variables from 0 to 1. In the example, "Rough" now has the numerical value 0.33, "Smooth" now has the numerical value 0.67, and "Slightly Rough" now has the numerical value 1.

Once all categorical variables were coded numerically, Gower's distance calculates a matrix of dissimilarities for each of the $\frac{n(n-1)}{2} = \frac{22(22-1)}{2} = 231$ pairs of tapes. This method combines the Manhattan distance for numerical variables and Hamming loss for categorical variables to get the total distance between two observations. For the three numerical variables, a range-normalized Manhattan distance is calculated: $$|\frac{T_{ik} - T_{jk}}{\text{range}_k}|$$ where $i, j = 1, 2, \dots, 22$ and $k = 1, 2, 3$. For the remaining 12 categorical variables, the Hamming loss is calculated with the following formula: $$I(T_{im} \neq T_{jm})$$ where $i, j = 1, 2, \dots, 22$ and $m = 4, 5, \dots, 15$. This indicator will equal 1 if $T_{im} \neq T_{jm}$ and 0 if $T_{im} \neq T_{jm}$. Gower's distance between two tapes is calculated by summing these variable distances and dividing by 15, the number of variables.

## Multidimensional Scaling

Once we have the pairwise distances between tapes from the data, multidimensional scaling provides one method of visualizing these clusters and their distances from each other on a two dimensional plot. Although the data for each tape is multivariate, multidimensional scaling preserves the distances between pairwise observations when plotting. Multidimensional scaling takes in the calculated distances and returns a set of 22 points where the distances between each point is approximately equal to the dissimilarities between each point. These points are then plotted on a two dimensional scatter plot to visualize the "closeness" of the tapes and can be viewed below.

```{r}
#| echo: false
#| warning: false

library(pheatmap)
library(ggpubr)
library(factoextra)
library(fmsb)
library(ggrepel)
```

```{r}
#| echo: false
#| warning: false

library(tidyverse)
#data cleaning width
width <- read.csv("width.csv", header = TRUE)
#getting rid of averages and standard deviation columns
width <- width %>% select(-c(5:6, 10:11, 15:20))
#remove "Tape" from X column
width$X <- str_replace(width$X, "Tape ", "")
#make values numeric
width <- data.frame(sapply(subset(width, select = c(1:10)), as.numeric))
#remove row of NAs and remove tape 7 (paper tape)
width <- width[-c(1, 8),]
#add column names
colnames(width) <- c("tape", rep("1", 3), rep("2", 3), rep("3", 3))
#make tape column character
width$tape <- as.factor(width$tape)
#pivot longer
width <- width %>% pivot_longer(!tape, names_to = "site", values_to = "width")


#data cleaning thickness
thickness <- read.csv("thickness.csv", header = TRUE)
#getting rid of averages and standard deviation columns
thickness <- thickness %>% select(-c(5:6, 10:11, 15:19))
#remove "Tape" from X column
thickness$X <- str_replace(thickness$X, "Tape ", "")
#make values numeric
thickness <- data.frame(sapply(subset(thickness, select = c(1:10)), as.numeric))
#remove row of NAs 
thickness <- thickness[-c(1),]
#remove all tape 7 (paper tape)
thickness <- thickness %>% filter(X != 7)
#add column names
colnames(thickness) <- c("tape", rep("1", 3), rep("2", 3), rep("3", 3))
#make tape column character
thickness$tape <- as.factor(thickness$tape)
#thickness of backing and adhesive
thickness_ba <- thickness[c(1:22),]
#thickness of backing
thickness_backing <- thickness[c(23:44),]
#pivot longer
thickness_ba <- thickness_ba %>% pivot_longer(!tape, names_to = "site", values_to = "thickness_backing_adhesive")
thickness_backing<- thickness_backing %>% pivot_longer(!tape, names_to = "site", values_to = "thickness_backing")

#merge
data <- cbind(width, thickness_ba$thickness_backing_adhesive, thickness_backing$thickness_backing)
colnames(data)[4] <- "thickness_backing_adhesive"
colnames(data)[5] <- "thickness_backing"

#get overall average width and thickness for each tape
data <- data %>% group_by(tape) %>% 
  summarize(avg_width = mean(width), 
            avg_thick_back_ad = mean(thickness_backing_adhesive), 
            avg_thick_back = mean(thickness_backing))

```

```{r}
#| echo: false
#| warning: false


#adding stereomicroscope physical data
stereo <- read.csv("stereo_phys.csv")
#remove X.4, X.9
stereo <- stereo %>% select(-c(X.4:X.9))
#remove "Tape" from X column
stereo$X <- str_replace(stereo$X, "Tape ", "")
#remove tape 7
stereo <- stereo[-c(1,8),]
#replace "-" with "no color"
stereo$X.3 <- str_replace(stereo$X.3, "-", "no color")
#new column names
colnames(stereo) <- c("tape", "surface_color", "surface_feature", "wide_narrow", "stereo_color")
#remove spaces in names
stereo$surface_color <- str_replace(stereo$surface_color, "Matte ", "Matte")
stereo$surface_color <- str_replace(stereo$surface_color, "Clear ", "Clear")
#add this physical data to other data set
data <- cbind(data, stereo[,2:5])
```

```{r}
#| echo: false
#| warning: false


#adding plm physical characteristics
plm <- read.csv("plm.csv")
#remove X.7, X.12
plm <- plm %>% select(-c(X.7:X.12))
#remove tape 7
plm <- plm[-c(1,8),]
#new column names
colnames(plm) <- c("tape", "texture", "bubbles", "particle", "edge_texture", "brightness", "plm_color", "BOPP", "extinction")
#replace "-" with "no color"
plm$plm_color <- str_replace(plm$plm_color, "-", "no color")
#remove bottom two rows
plm <- plm[-c(23, 24),]
#BOPP make binary
plm$BOPP <- ifelse(plm$BOPP == "-", 0, 1)
#add this physical data to other data set
data <- cbind(data, plm[,2:9])
```

```{r}
#| echo: false
#| warning: false


#coding all categorical variables
#surface color
data$surface_color <- ifelse(data$surface_color == "Clear", 1, data$surface_color)
data$surface_color <- ifelse(data$surface_color == "Matte", 2, data$surface_color)
data$surface_color <- ifelse(data$surface_color == "Slightly Matte", 3, data$surface_color)
data$surface_color <- ifelse(data$surface_color == "Off-white Matte", 4, data$surface_color)

#surface feature
data$surface_feature <- ifelse(data$surface_feature == "Rough ", 1, data$surface_feature)
data$surface_feature <- ifelse(data$surface_feature == "Circular bubbles", 2, data$surface_feature)
data$surface_feature <- ifelse(data$surface_feature == "Irregular large bubble (water-like)", 3, data$surface_feature)
data$surface_feature <- ifelse(data$surface_feature == "Slightly Rough", 4, data$surface_feature)
data$surface_feature <- ifelse(data$surface_feature == "Large and small circular bubbles", 5, data$surface_feature)
data$surface_feature <- ifelse(data$surface_feature == "Many grooves and bubbles ", 6, data$surface_feature)
data$surface_feature <- ifelse(data$surface_feature == "Minimal surface features ", 7, data$surface_feature)
data$surface_feature <- ifelse(data$surface_feature == "Many grooves ", 8, data$surface_feature)
data$surface_feature <- ifelse(data$surface_feature == "Some small bubbles", 9, data$surface_feature)
data$surface_feature <- ifelse(data$surface_feature == "Large bubble and Irregular bubbles", 10, data$surface_feature)
data$surface_feature <- ifelse(data$surface_feature == "Grooves (water-like)", 11, data$surface_feature)

#wide/narrow
data$wide_narrow <- ifelse(data$wide_narrow == "Wide ", 1, 0)

#stereomicroscope color
data$stereo_color <- ifelse(data$stereo_color == "Pink ", "Pink", data$stereo_color)
data$stereo_color <- ifelse(data$stereo_color == "no color", 1, data$stereo_color)
data$stereo_color <- ifelse(data$stereo_color == "Pink/Green ", 2, data$stereo_color)
data$stereo_color <- ifelse(data$stereo_color == "Purple/Green ", 3, data$stereo_color)
data$stereo_color <- ifelse(data$stereo_color == "Brown ", 4, data$stereo_color)
data$stereo_color <- ifelse(data$stereo_color == "Pink/Green/Yellow/Purple/Blue", 5, data$stereo_color)
data$stereo_color <- ifelse(data$stereo_color == "Slightly Pink ", 6, data$stereo_color)
data$stereo_color <- ifelse(data$stereo_color == "Pink", 7, data$stereo_color)
data$stereo_color <- ifelse(data$stereo_color == "Blue/Pink ", 8, data$stereo_color)
data$stereo_color <- ifelse(data$stereo_color == "Pink/Red/Orange", 9, data$stereo_color)
data$stereo_color <- ifelse(data$stereo_color == "Purple/Blue", 10, data$stereo_color)
data$stereo_color <- ifelse(data$stereo_color == "High Pink ", 11, data$stereo_color)

#texture
data$texture <- ifelse(data$texture == "Rough ", 1, data$texture)
data$texture <- ifelse(data$texture == "Smooth ", 2, data$texture)
data$texture <- ifelse(data$texture == "Slightly Rough ", 3, data$texture)

#bubbles
data$bubbles <- ifelse(data$bubbles == "Y", 1, 0)

#particle
data$particle <- ifelse(data$particle == "Y", 1, 0)

#edge texture
data$edge_texture <- ifelse(data$edge_texture == "Smooth ", 1, 0)

#brightness
data$brightness <- ifelse(data$brightness == "Low Dark ", 1, data$brightness)
data$brightness <- ifelse(data$brightness == "Bright ", 2, data$brightness)
data$brightness <- ifelse(data$brightness == "Dark ", 3, data$brightness)
data$brightness <- ifelse(data$brightness == "Low Bright ", 4, data$brightness)
data$brightness <- ifelse(data$brightness == "High Bright ", 5, data$brightness)
data$brightness <- ifelse(data$brightness == "Bright", 2, data$brightness)

#plm color
data$plm_color <- ifelse(data$plm_color == "no color", 1, data$plm_color)
data$plm_color <- ifelse(data$plm_color == "Green ", 2, data$plm_color)
data$plm_color <- ifelse(data$plm_color == "Slightly green ", 3, data$plm_color)
data$plm_color <- ifelse(data$plm_color == "Pink/Yellow", 4, data$plm_color)
data$plm_color <- ifelse(data$plm_color == "Pink/Yellow/Bright Blue/Turquoise", 5, data$plm_color)
data$plm_color <- ifelse(data$plm_color == "Light Green ", 6, data$plm_color)
data$plm_color <- ifelse(data$plm_color == "Yellow/Gold", 7, data$plm_color)
data$plm_color <- ifelse(data$plm_color == "Yellow/Green", 8, data$plm_color)
data$plm_color <- ifelse(data$plm_color == "Orange", 9, data$plm_color)
data$plm_color <- ifelse(data$plm_color == "Yellow", 10, data$plm_color)

#extinction
data$extinction <- ifelse(data$extinction == "Parallel ", "Parallel", data$extinction)
data$extinction <- ifelse(data$extinction == "Oblique ", "Oblique", data$extinction)
data$extinction <- ifelse(data$extinction == "Symmetrical", "Symmetric ", data$extinction)
data$extinction <- ifelse(data$extinction == "Parallel", 1, data$extinction)
data$extinction <- ifelse(data$extinction == "Symmetric ", 2, data$extinction)
data$extinction <- ifelse(data$extinction == "Oblique", 3, data$extinction)
```

```{r}
#| echo: false
#| warning: false


#convert categorical to numiercal
data$surface_color <- as.numeric(data$surface_color)
data$surface_feature <- as.numeric(data$surface_feature)
data$stereo_color <- as.numeric(data$stereo_color)
data$texture <- as.numeric(data$texture)
data$brightness <- as.numeric(data$brightness)
data$plm_color <- as.numeric(data$plm_color)
data$extinction <- as.numeric(data$extinction)

#normalize all variables
data$avg_width <- data$avg_width/max(data$avg_width)
data$avg_thick_back_ad <- data$avg_thick_back_ad/max(data$avg_thick_back_ad)
data$avg_thick_back <- data$avg_thick_back/max(data$avg_thick_back)
data$surface_color <- data$surface_color/max(data$surface_color)
data$surface_feature <- data$surface_feature/max(data$surface_feature)
data$stereo_color <- data$stereo_color/max(data$stereo_color)
data$texture <- data$texture/max(data$texture)
data$brightness <- data$brightness/max(data$brightness)
data$plm_color <- data$plm_color/max(data$plm_color)
data$extinction <- data$extinction/max(data$extinction)
```

```{r}
#| echo: false
#| warning: false


#function that calculates the distance between two tapes

pair_distance <- function(first, second){
  sum <- 0
  for (i in 2:4){
    val <- (first[i] - second[i])^2
    sum <- val + sum
  }
  sum <- sum + sum(first[5:16]!=second[5:16])
  return(sum)
}

```

```{r}
#| echo: false
#| warning: false


#unique combos of rows
combos <- combn(seq(1:22), 2)
#empty list for distances of all possible combos of tapes
distances <- c()
#calculates the distance between all possible combos of tapes
for (i in 1:dim(combos)[2]){
  first <- data[combos[,i][1],]
  second <- data[combos[,i][2],]
  distances <- c(distances, pair_distance(first, second))
}

combo_distances <- cbind(t(combos), matrix(distances))
```

\newpage

```{r}
#| label: fig-mds
#| fig-cap: "Multidimensional Scaling Plot of 22 Different Tapes. Tape 7 is omitted."
#| echo: false
#| warning: false


#multidimensional scaling

#symmetric matrix of our calculated distances

mat <- matrix(0, nrow = 22, ncol = 22)
mat[lower.tri(mat, diag = FALSE)] <- unlist(combo_distances[,3])
mat <- as.dist(mat)


mds <- mat %>% 
  cmdscale() %>%
  as_tibble()

mds <- as.data.frame(mds)
row.names(mds) <- c(seq(1, 6), seq(8, 23))
mds$clust <- c()

colnames(mds) <- c("Dimension 1", "Dimension 2")
ggscatter(mds, x = "Dimension 1", y = "Dimension 2", 
#          label = rownames(mds),
          size = 1,
#          repel = TRUE, 
          title = "Multidimensional Scaling Plot") +
  geom_label_repel(aes(label = rownames(mds)), size = 3) +
  theme_bw() +
  theme(axis.title = element_text(size = 14),
        plot.title = element_text(size = 16))
```

\newpage

## Heatmap

We can also use a heatmap to visually identify similarities and dissimilarities between tapes. In a heatmap cells are color-coded to quickly compare one row or tape to another. The heatmap also allows one to aggregate the rows in clusters based on the distances calculated from @sec-distances. @fig-heatmap below is the heatmap generated for the 22 tapes using Gower's distance.\
\

```{r, out.width = "100%"}
#| label: fig-heatmap
#| fig-cap: "Clustered Heatmap of 22 Different Tapes. Tape 7 is omitted"
#| echo: false
#| warning: false


#pheatmap
library(philentropy)
row.names(data) <- c(seq(1, 6), seq(8, 23))
library(cluster)
gower_samples <- as.dist(as.matrix(daisy(data[,2:16], metric = "gower")))
gower_features <- as.dist(as.matrix(daisy(t(data[,2:16]), metric = "gower")))

pheatmap(data[,2:16], 
                    display_numbers = TRUE, 
                    clustering_distance_rows=gower_samples,
                    clustering_distance_cols=gower_features,
                    labels_col = c("Avg Width", "Avg Thickness Backing/Adhesive", "Avg Thickness Backing", "Surface Color", "Surface Feature", "Wide", "Stereomicroscope Color", "Texture", "Bubbles", "Particle", "Edge Texture", "Brightness", "PLM Color", "BOPP", "Angle of Extinction"),
                    labels_row = c("3M 810 Scotch - Tape 1", "3M 600 Scotch - Tape 2", "Scotch Double-Sided - Tape 3", "Scotch Gift-Wrap - Tape 4", "Scotch Transparent - Tape 5", "Scotch Super-Hold - Tape 6", "Scotch Wall-Safe - Tape 8", "Scotch Scrapbooking - Tape 9", "Scotch Single Sided - Tape 10", "Scotch MultiTask - Tape 11", "Scotch Poster - Tape 12", "Staples Invisible - Tape 13", "Amazon Matte - Tape 14", "Amazon Invisible - Tape 15", "Amazon Transparent - Tape 16", "Pen+Gear Invisible - Tape 17", "Pen+Gear Transparent - Tape 18", "Pen+Gear Double-Sided - Tape 19", "Up & Up Transparent - Tape 20", "Up & Up Invisible - Tape 21", "Up & Up Double-Sided - Tape 22", "Up & Up Gift - Tape 23"),
                    angle_col = 3,
                    fontsize = 6,
                    cellheight = 5.6,
                    cellwidth = 13.5
                    )

```

\newpage

# Analysis and Conclusion

From @fig-mds, we can begin to visualize some of the groups of tapes. In the top left corner, tapes 2, 3, 9, 10, and 22 are clustered together. Tapes 18 and 20 almost share the exact same point with 12 and 16 directly below them suggesting another cluster of four tapes. Tapes 11 and 6 float in the middle of the plot and may share similarities with tape 10 on the left or tape 4 on the right. The tapes in the top right corner could be divided into two clusters possibly with 14 and 12 in one, and the other tapes in another. From this multidimensional scaling plot, we can view the rudimentary groupings of tapes in about 5 clusters.

According to @fig-heatmap, 22 tapes were divided into 5 clusters. Cluster 1 is composed of tapes 19, 2, 3, 9, and 22. Cluster 2 is composed of tapes 23, 14, 15, and 17. Cluster 3 contains tapes 12, 16, 18, and 20. Cluster 4 contains tapes 4, 6, and 11. Lastly, cluster 5 is composed of tapes 5, 21, 8, 1, and 13. Although tape 10 appears to be grouped with cluster 4, looking closer at the characteristics of tape 10 and comparing them to tapes 4, 6, and 11, there are very few variables that tape 10 has in common with the others. Looking back to @fig-mds, tape 10 and tape 4, which is grouped in cluster 4, have a very large distance from one another and we therefore determine that tape 10 stands alone from all clusters. 

Cluster 1 features: All tapes in this cluster have a smooth edge texture, are narrow in width, exhibit a clear surface color, possess a smooth texture, contain bubbles, and have no particles. In Surface Feature, each tape is different. For example, tapes has Minimal Surface Features, Large bubble and Irregular, Circular bubbles, Irregular large bubble(water-like), Many Grooves and bubbles, and Grooves(water-like).

Cluster 2 features: All tapes of this cluster are wide in width, exhibit Bright in brightness, have a rough surface feature and texture, have no particles, don't have bubbles, and are categorized as MOPP.In PLM Color, tape is different. For example, tapes has Yellow, Light Green, and Yellow/Gold.

Cluster 3 features: All tapes of this cluster are rough, are wide in width, exhibit High Bright in brightness, have a smooth texture, a clear surface color, don't have bubbles, and are categorized as MOPP. In Stereomicroscope Color, each tape is different. For example, tapes has Pink/Green/Yellow/Purple/Blue, Blue/Pink, Pink/Red/Orange, and Purple/Blue.

Cluster 4 features: All tapes of this cluster have a smooth edge texture, are wide in width, have particles, don't have bubbles, and are categorized as MOPP. In Brightness, tape is different. For example, tapes has Bright and Low Bright.

Cluster 5 features: All tapes of this cluster have a smooth edge texture, are wide in width, mostly exhibit a rough surface feature, have a rough texture, display a Pink color under the stereomicroscope, have a Matte surface color, contain particles, and are categorized as MOPP. In Brightness, tape is different. For example,tapes has Low Dark, Low Bright and Dark.

Therefore, according to the analysis of pheatmap, we can know that pheatmap can effectively distinguish different tapes and find out their similar rules. Each cluster has many of the same variables in its tape. At the same time, each cluster also has a different place, which can distinguish all tapes, it is easy to find the tape number and brand.

\newpage

# Appendix {#sec-appendix}

```{r}
#| echo: false
#| message: false
library(tidyverse)
library(cluster)
```

```{r}
#| echo: false
#| message: false
data <- read.csv("init_data.csv")

# Drop the first column (Unnamed: 0) as it appears to be an identifier
data <- data[,-1]

# Convert categorical variables to one-hot encoded format
data_encoded <- as.data.frame(model.matrix(~.-1, data))

```

```{r}
#| echo: false
#| label: fig-elbow
#| fig-cap: 5 optimal number of clusters
#| message: false
# Determine the optimal number of clusters using the elbow method
inertias <- c()
cluster_range <- 1:14  # Checking for up to 14 clusters

for (k in cluster_range) {
  set.seed(42)  # Setting seed for reproducibility
  kmeans_result <- kmeans(data_encoded, centers=k, nstart=25)
  inertias <- c(inertias, kmeans_result$tot.withinss)
}

# Plotting the elbow curve
plot(cluster_range, inertias, type="l", col="blue", xlab="Number of Clusters", ylab="Inertia",
     main="Elbow Method for Optimal Number of Clusters", ylim=c(min(inertias), max(inertias)))
points(cluster_range, inertias, pch=19, col="red")
grid(col="black")
```

@fig-elbow demonstrates another method of supporting our conclusion of 5 clusters. Using the elbow method in k-means clustering, the optimal number of clusters occurs at the "elbow" of the curve of the line. This appears to occur between 4 and 6 clusters which further supports our previous conclusions. However, this method should be reproduced and analyzed with caution as our sample size is small which may produce unclear and poor conclusions. With larger sample sizes, the elbow method may more accurately determine the optimal number of clusters.
